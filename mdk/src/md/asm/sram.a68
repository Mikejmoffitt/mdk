; mdk SRAM routiness
; Michael Moffitt 2023
; Thanks to Chilly Willy and Stephane Dallongeville for extant reference code.

	.globl	md_sram_write
md_sram_write:
	; Enable SRAM for writing.
	move.b	#$01, (SRAM_CTRL).l

	; Set up a0 with the destination address.
	lea	SRAM_BASE, a0
	move.l	4(sp), d0  ; dest_offset
	add.l	d0, d0
	lea	(a0, d0.l), a0

	; a1 gets the 68000-side source address, and d1 gets the byte count.
	move.l	8(sp), a1  ; src_addr
	move.w	14(sp), d1  ; n
	subq.w	#1, d1

	; Copy n bytes (d1 as loop counter).
	moveq	#0, d0
0:
	move.b	(a1)+, d0
	move.w	d0, (a0)+
	dbf	d1, 0b

	; Disable SRAM.
	move.b	#$00, (SRAM_CTRL).l
	rts

; Copies n bytes from 68000 memory space src_addr to dest_offset within SRAM.

; Copies n bytes from src_offset in SRAM to dest_addr in 68000 memory space.
	.globl	md_sram_read
md_sram_read:
	; Enable SRAM (read-only).
	move.b	#$03, (SRAM_CTRL).l

	; Set up a0 with the source address.
	lea	SRAM_BASE, a0
	move.l	4(sp), d0  ; src_offset
	add.l	d0, d0
	lea	(a0, d0.l), a0

	; a1 gets the 68000-side dest address, and d1 gets the byte count.
	move.l	8(sp), a1  ; dest_addr
	move.w	14(sp), d1  ; n
	subq.w	#1, d1

	; Copy n bytes.
	moveq	#0, d0
0:
	move.w	(a0)+, d0
	move.b	d0, (a1)+
	dbf	d1, 0b

	; Disable SRAM.
	move.b	#$00, (SRAM_CTRL).l
	rts
