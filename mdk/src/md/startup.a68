; mdk header, interrupts, and C runtime startup
; Michael Moffitt 2018-2022
#include	"md/top.inc"
#include	"md/errors.h"

	.section	.text.keepboot

	.extern	_etext
	.extern	_stext
	.extern	_edata
	.extern	_sdata
	.extern	main

	.extern	md_vdp_min_init

	.global	_v_table
	.global	_start
	.global	startup_forever
	.org	$00000000
_v_table:
	.long	$00000000
	.long	start
	.long	_v_bus_error
	.long	_v_address_error
	.long	_v_illegal_instruction
	.long	_v_div_zero
	.long	_v_chk
	.long	_v_trapv
	.long	_v_privelege
	.long	_v_trace
	.long	_v_aline_emu
	.long	_v_fline_emu
	.long	_v_reserved
	.long	_v_coproc_violation
	.long	_v_format
	.long	_v_uninit
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_spurious
	.long	_v_irq1
	.long	_v_irq2
	.long	_v_irq3
	.long	_v_irq4
	.long	_v_irq5
	.long	_v_irq6
	.long	_v_irq7
	.long	_v_trap0x0
	.long	_v_trap0x1
	.long	_v_trap0x2
	.long	_v_trap0x3
	.long	_v_trap0x4
	.long	_v_trap0x5
	.long	_v_trap0x6
	.long	_v_trap0x7
	.long	_v_trap0x8
	.long	_v_trap0x9
	.long	_v_trap0xa
	.long	_v_trap0xb
	.long	_v_trap0xc
	.long	_v_trap0xd
	.long	_v_trap0xe
	.long	_v_trap0xf
	; Unimplemented (FPU)
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	; Unimplemented (MMU)
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	; Unimplemented (reserved)
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp

.include	"header.inc"

.macro	calla6	routine
	lea	(. + 12).l, a6  ; avoiding the need for even a temp label
	jmp	(\routine).l
.endm


; ==============================================================================
;
; Entry point
;
; ==============================================================================

; Routines here do not use a call stack, but instead store the return address in
; the a6 register; until the WRAM test has completed it is not assumed that the
; RAM actually works.

#define MDK_BOOT_DEBUG

#ifdef MDK_BOOT_DEBUG

.macro	beepcheck	val
	move.w	#\val, d0
	moveq	#4-1, d1
	calla6	md_test_beep
.endm

#else

.macro	beepcheck	val
.endm

#endif  // MDK_BOOT_DEBUG

_start:
start:
	move.w	#$2700, sr
	move.l	($0).l, sp

#ifndef MDK_TARGET_C2
	calla6	tmss_init
#else
	calla6	md_c2_min_init
#endif  // MDK_TARGET_C2
	calla6	psg_min_init
	calla6	opn_min_init
	calla6	md_vdp_min_init

softreset:
	; Turn off display output
	move.w	#VDP_REGST(VDP_MODESET2, $14), (VDP_LOC_BASE+VDP_OFFS_CTRL)
	; WRAM Test - on MD, skipped unless the START button is held.
#ifndef MDK_TARGET_C2
	; Prepare controller read
	move.l	#$00400040, (IO_LOC_BASE + 8).l  ; Set TH pin as an output
	move.b	#$00, (IO_LOC_BASE + 3).l  ; TH low
	.rept	20
	nop
	.endr
	; If start is not held, skip the memory test.
	btst	#5, (IO_LOC_BASE + 3).l
	bne.s	checksum
#endif  // MDK_TARGET_C2

	calla6	md_error_startup_wram_check_display

	move.w	#$5555, d0
	calla6	startup_wram_test_sub
	move.w	#$AAAA, d0
	calla6	startup_wram_test_sub

	calla6	md_error_startup_wram_ok_display

;
; Checksum
;
checksum:
	; TODO: Enable once checksum is actually being set
	bra.s	checksum_ok
	lea	start, a0
	lea	_stext, a1
	moveq	#0, d0
checksum_loop:
	.rept	15
	add.w	(a0)+, d0
	cmp.l	a0, a1
	beq.s	checksum_done
	.endr
	bra.s	checksum_loop

checksum_done:
	sub.w	($18E).w, d0
	beq.s	checksum_ok
checksum_bad:
	calla6	md_error_startup_checksum_error_display
	bra.w	startup_forever
checksum_ok:
	jmp	(md_crt0_begin).l


; ==============================================================================
;
; Test Subroutines
;
; ==============================================================================

; C-callable beep code.
; void md_test_beep_c(uint32_t beepcode, uint16_t len);
	.global	md_test_beep_c
md_test_beep_c:
	move.l	4(sp), d0
	move.w	8+2(sp), d1
	movem.l	d2/a6, -(sp)
	lea	0f, a6
	bra.s	md_test_beep
0:
	movem.l	(sp)+, d2/a6
	rts

; d0.l = beep pattern (high or low, from lsb)
; d1.w = beep pattern length - 1
md_test_beep:
	lea	PSG_LOC_BASE, a0
	move.b	#$9F, (a0)  ; Channel 0 att F (mute)
	move.b	#$80, (a0)  ; Channel 0 tone first part
	move.b	#$30, (a0)
	; default low tone
	asr.l	#1, d0
	bcc.s	0f
	; set high tone
	move.b	#$0C, (a0)
0:
	move.b	#$90, (a0)  ; Channel 0 att 0 (loud)

	; delay
	moveq	#-1, d2
1:
	.rept	3
	nop
	.endr
	dbf	d2, 1b
	; silence
	move.b	#$9F, (a0)  ; Channel 0 att F (mute)
	moveq	#-1, d2
2:
	.rept	1
	nop
	.endr
	dbf	d2, 2b
	dbf	d1, md_test_beep
	; delay
	moveq	#-1, d2
1:
	.rept	20
	nop
	.endr
	dbf	d2, 1b
	jmp	(a6)
	

#ifdef MDK_TARGET_C2
md_c2_min_init:
	; Set up I/O
	sf	(SYSC_IO_LOC_CTRL0).l
	sf	(SYSC_IO_LOC_CTRL1).l
	sf	(SYSC_IO_LOC_CTRL2).l
;	move.b	#$F0, (SYSC_IO_LOC_CTRL2).l
	move.b	#$88, (SYSC_IO_LOC_CTRL3).l  ; Ports D and H become outputs.
	move.b	#$B0, (SYSC_IO_LOC_PORTD).l
	move.b	#$30, (SYSC_IO_LOC_PORTH).l
	; Enable display
	move.b	#$00, (SYSC_PROTECTION_LOC_SECURITY).l
	move.b	#$06, (SYSC_PROTECTION_LOC_VCTRL).l
	jmp	(a6)
#endif

psg_min_init:
	; Shut up PSG - On my VA0 units it defaults to a loud noise.
	lea	PSG_LOC_BASE, a0
	move.b	#$9F, d0  ; Channel 0 att 15
	move.b	#$20, d1  ; Channel offset
	move.b	d0, (a0)
	add.b	d1, d0
	move.b	d0, (a0)
	add.b	d1, d0
	move.b	d0, (a0)
	add.b	d1, d0
	move.b	d0, (a0)
	jmp	(a6)

opn_min_init:
#ifndef MDK_TARGET_C2
	zbusreq
#endif

	lea	OPN_BASE, a0
	move.b	#$27, (a0)  ; Timer control
0:
	tst.b	(a0)
	bmi.s	0b

	move.b	#$00, 1(a0)  ; Disable timers
0:
	tst.b	(a0)
	bmi.s	0b

#ifndef MDK_TARGET_C2
	zbusrel
#endif

	jmp	(a6)

#ifndef MDK_TARGET_C2
tmss_init:
	; Halt Z80
	move.w	#$0100, (SYS_Z80_PORT_BUS_LOC).l
	; TMSS
	move.b	IO_LOC_VERSION, d0
	andi.b	#$0F, d0
	beq.s	0f
	move.l	#$53454741, TMSS_PORT  ; "SEGA"
0:
	jmp	(a6)
#endif

; d0 = test word
; a6 = return
startup_wram_test_sub:
	lea	WRAM_BASE, a4
	move.w	#(WRAM_SIZE/2) - 1, d7
wram_test_loop:
	move.w	d0, (a4)
	cmp.w	(a4)+, d0
	bne.s	wram_test_failed
	dbra	d7, wram_test_loop
	jmp	(a6)

wram_test_failed:
	; knowingly stomping on the a6 return pointer.
	calla6	md_error_startup_wram_ng_display
	bra.w	startup_forever

startup_forever:
#ifdef MDK_TARGET_C2
	; Arcade target hangs on the error indefinitely
	bra.s	startup_forever
	; TODO: Start button, or eventual restart.
#else
	move.l	#$00400040, (IO_LOC_BASE + 8).l  ; Set TH pin as an output
	move.b	#$00, (IO_LOC_BASE + 3).l  ; TH low
	btst	#5, (IO_LOC_BASE + 3).l  ; Check start button
	bne.s	startup_forever
startup_forever_wait_start_release:
	btst	#5, (IO_LOC_BASE + 3).l  ; Check start button
	beq.s	startup_forever_wait_start_release
#endif
	bra.w	start


; ==============================================================================
;
; Exception Vectors
;
; ==============================================================================
_v_bus_error:
	showerr	MD_ERRMSG_BUS_ERROR
_v_address_error:
	showerr	MD_ERRMSG_ADDRESS_ERROR
_v_illegal_instruction:
	showerr	MD_ERRMSG_ILLEGAL_INSTRUCTION
_v_div_zero:
	showerr	MD_ERRMSG_DIV_ZERO
_v_chk:
	showerr	MD_ERRMSG_CHK
_v_trapv:
	showerr	MD_ERRMSG_TRAPV
_v_privelege:
	showerr	MD_ERRMSG_PRIVELEGE
_v_trace:
	showerr	MD_ERRMSG_TRACE
_v_unused_irq:
	showerr	MD_ERRMSG_UNUSED_IRQ
_v_aline_emu:
	showerr	MD_ERRMSG_ALINE_EMU
_v_fline_emu:
	showerr	MD_ERRMSG_FLINE_EMU
_v_reserved:
	showerr	MD_ERRMSG_RESERVED
_v_coproc_violation:
	showerr	MD_ERRMSG_COPROC_VIOLATION
_v_format:
	showerr	MD_ERRMSG_FORMAT
_v_uninit:
	showerr	MD_ERRMSG_UNINIT
_v_spurious:
	showerr	MD_ERRMSG_SPURIOUS
_v_trap0x0:
	showerr	MD_ERRMSG_TRAP0X0
_v_trap0x1:
	showerr	MD_ERRMSG_TRAP0X1
_v_trap0x2:
	showerr	MD_ERRMSG_TRAP0X2
_v_trap0x3:
	showerr	MD_ERRMSG_TRAP0X3
_v_trap0x4:
	showerr	MD_ERRMSG_TRAP0X4
_v_trap0x5:
	showerr	MD_ERRMSG_TRAP0X5
_v_trap0x6:
	showerr	MD_ERRMSG_TRAP0X6
_v_trap0x7:
	showerr	MD_ERRMSG_TRAP0X7
_v_trap0x8:
	showerr	MD_ERRMSG_TRAP0X8
_v_trap0x9:
	showerr	MD_ERRMSG_TRAP0X9
_v_trap0xa:
	showerr	MD_ERRMSG_TRAP0XA
_v_trap0xb:
	showerr	MD_ERRMSG_TRAP0XB
_v_trap0xc:
	showerr	MD_ERRMSG_TRAP0XC
_v_trap0xd:
	showerr	MD_ERRMSG_TRAP0XD
_v_trap0xe:
	showerr	MD_ERRMSG_TRAP0XE
_v_trap0xf:
	showerr	MD_ERRMSG_TRAP0XF
_v_unimp:
	showerr	MD_ERRMSG_UNIMP
