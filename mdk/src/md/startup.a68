; mdk header, interrupts, and C runtime startup
; Michael Moffitt 2018-2022
#include	"md/top.inc"

	.section	.text.keepboot

	.extern	_etext
	.extern	_stext
	.extern	_edata
	.extern	_sdata
	.extern	main

	.extern	md_vdp_min_init

	.global	_v_table
	.global	_start
	.global	startup_forever
	.org	$00000000
_v_table:
	.long	$00000000
	.long	start
	.long	_v_bus_error
	.long	_v_address_error
	.long	_v_illegal_instruction
	.long	_v_div_zero
	.long	_v_chk
	.long	_v_trapv
	.long	_v_privelege
	.long	_v_trace
	.long	_v_aline_emu
	.long	_v_fline_emu
	.long	_v_reserved
	.long	_v_coproc_violation
	.long	_v_format
	.long	_v_uninit
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_reserved
	.long	_v_spurious
	.long	_v_irq1
	.long	_v_irq2
	.long	_v_irq3
	.long	_v_irq4
	.long	_v_irq5
	.long	_v_irq6
	.long	_v_irq7
	.long	_v_trap0x0
	.long	_v_trap0x1
	.long	_v_trap0x2
	.long	_v_trap0x3
	.long	_v_trap0x4
	.long	_v_trap0x5
	.long	_v_trap0x6
	.long	_v_trap0x7
	.long	_v_trap0x8
	.long	_v_trap0x9
	.long	_v_trap0xa
	.long	_v_trap0xb
	.long	_v_trap0xc
	.long	_v_trap0xd
	.long	_v_trap0xe
	.long	_v_trap0xf
	; Unimplemented (FPU)
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	; Unimplemented (MMU)
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	; Unimplemented (reserved)
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp
	.long	_v_unimp

.include	"header.inc"

.macro	calla6	routine
	lea	(. + 12).l, a6  ; avoiding the need for even a temp label
	jmp	(\routine).l
.endm


; ==============================================================================
;
; Entry point
;
; ==============================================================================

; Routines here do not use a call stack, but instead store the return address in
; the a6 register; until the WRAM test has completed it is not assumed that the
; RAM actually works.

_start:
start:
	move.w	#$2700, sr
	move.l	($0).l, sp

#ifndef MDK_TARGET_C2
	calla6	tmss_init
#else MDK_TARGET_C2
	calla6	md_c2_min_init
#endif  // MDK_TARGET_C2
	calla6	psg_min_init
	calla6	md_vdp_min_init

softreset:
	; Turn off display output
	move.w	#VDP_REGST(VDP_MODESET2, $14), (VDP_LOC_BASE+VDP_OFFS_CTRL)
	; WRAM Test - on MD, skipped unless the START button is held.
#ifndef MDK_TARGET_C2
	; Prepare controller read
	move.l	#$00400040, (IO_LOC_BASE + 8).l  ; Set TH pin as an output
	move.b	#$00, (IO_LOC_BASE + 3).l  ; TH low
	.rept	20
	nop
	.endr
	; If start is not held, skip the memory test.
	btst	#5, (IO_LOC_BASE + 3).l
	bne.s	checksum
#endif  // MDK_TARGET_C2

	calla6	md_error_startup_wram_check_display

	move.w	#$5555, d0
	calla6	startup_wram_test_sub
	move.w	#$AAAA, d0
	calla6	startup_wram_test_sub
	calla6	md_error_startup_wram_ok_display

;
; Checksum
;
checksum:
#ifdef MDK_WANT_CHECKSUM
	lea	start, a0
	lea	_stext, a1
	moveq	#0, d0
checksum_loop:
	.rept	15
	add.w	(a0)+, d0
	cmp.l	a0, a1
	beq.s	checksum_done
	.endr
	bra.s	checksum_loop

checksum_done:
	sub.w	($18E).w, d0
	bne.s	checksum_bad
#endif  // MDK_WANT_CHECKSUM
	jmp	md_crt0_begin

#ifdef MDK_WANT_CHECKSUM
checksum_bad:
	calla6	md_error_startup_checksum_error_display
	bra.w	startup_forever
#endif  // MDK_WANT_CHECKSUM


; ==============================================================================
;
; Test Subroutines
;
; ==============================================================================

#ifdef MDK_TARGET_C2
md_c2_min_init:
	; Set up I/O
	move.b	#$88, (SYSC_IO_LOC_CTRL3).l  ; Ports D and H become outputs.
	move.b	#$B0, (SYSC_IO_LOC_PORTD).l
	move.b	#$30, (SYSC_IO_LOC_PORTH).l
	jmp	(a6)
#endif

psg_min_init:
	; Shut up PSG - On my VA0 units it defaults to a loud noise.
	lea	PSG_LOC_BASE, a0
	move.b	#$9F, d0  ; Channel 0 att 15
	move.b	#$20, d1  ; Channel offset
	move.b	d0, (a0)
	add.b	d1, d0
	move.b	d0, (a0)
	add.b	d1, d0
	move.b	d0, (a0)
	add.b	d1, d0
	move.b	d0, (a0)
	jmp	(a6)

#ifndef MDK_TARGET_C2
tmss_init:
	; Halt Z80
	move.w	#$0100, (SYS_Z80_PORT_BUS_LOC).l
	; TMSS
	move.b	IO_LOC_VERSION, d0
	andi.b	#$0F, d0
	beq.s	0f
	move.l	#"SEGA", TMSS_PORT  ; "SEGA"
0:
	jmp	(a6)
#endif

; d0 = test word
; a6 = return
startup_wram_test_sub:
	lea	WRAM_BASE, a4
	move.w	#(WRAM_SIZE/2) - 1, d7
wram_test_loop:
	move.w	d0, (a4)
	cmp.w	(a4)+, d0
	bne.s	wram_test_failed
	dbra	d7, wram_test_loop
	jmp	(a6)

wram_test_failed:
	; knowingly stomping on the a6 return pointer.
	calla6	md_error_startup_wram_ng_display
	bra.w	startup_forever

startup_forever:
#ifdef MDK_TARGET_C2
	; Arcade target hangs on the error indefinitely
	bra.s	startup_forever
	; TODO: Start button, or eventual restart.
#else
	move.l	#$00400040, (IO_LOC_BASE + 8).l  ; Set TH pin as an output
	move.b	#$00, (IO_LOC_BASE + 3).l  ; TH low
	btst	#5, (IO_LOC_BASE + 3).l  ; Check start button
	bne.s	startup_forever
startup_forever_wait_start_release:
	btst	#5, (IO_LOC_BASE + 3).l  ; Check start button
	beq.s	startup_forever_wait_start_release
#endif
	bra.w	start


; ==============================================================================
;
; Exception Vectors
;
; ==============================================================================
_v_bus_error:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#0, d0
	jmp	(md_error_dispatch)
_v_address_error:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#1, d0
	jmp	(md_error_dispatch)
_v_illegal_instruction:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#2, d0
	jmp	(md_error_dispatch)
_v_div_zero:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#3, d0
	jmp	(md_error_dispatch)
_v_chk:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#4, d0
	jmp	(md_error_dispatch)
_v_trapv:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#5, d0
	jmp	(md_error_dispatch)
_v_privelege:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#6, d0
	jmp	(md_error_dispatch)
_v_trace:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#7, d0
	jmp	(md_error_dispatch)
_v_unused_irq:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#8, d0
	jmp	(md_error_dispatch)
_v_aline_emu:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#9, d0
	jmp	(md_error_dispatch)
_v_fline_emu:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#10, d0
	jmp	(md_error_dispatch)
_v_reserved:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#11, d0
	jmp	(md_error_dispatch)
_v_coproc_violation:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#12, d0
	jmp	(md_error_dispatch)
_v_format:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#13, d0
	jmp	(md_error_dispatch)
_v_uninit:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#14, d0
	jmp	(md_error_dispatch)
_v_spurious:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#15, d0
	jmp	(md_error_dispatch)
_v_trap0x0:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#16, d0
	jmp	(md_error_dispatch)
_v_trap0x1:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#17, d0
	jmp	(md_error_dispatch)
_v_trap0x2:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#18, d0
	jmp	(md_error_dispatch)
_v_trap0x3:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#19, d0
	jmp	(md_error_dispatch)
_v_trap0x4:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#20, d0
	jmp	(md_error_dispatch)
_v_trap0x5:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#21, d0
	jmp	(md_error_dispatch)
_v_trap0x6:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#22, d0
	jmp	(md_error_dispatch)
_v_trap0x7:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#23, d0
	jmp	(md_error_dispatch)
_v_trap0x8:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#24, d0
	jmp	(md_error_dispatch)
_v_trap0x9:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#25, d0
	jmp	(md_error_dispatch)
_v_trap0xa:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#26, d0
	jmp	(md_error_dispatch)
_v_trap0xb:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#27, d0
	jmp	(md_error_dispatch)
_v_trap0xc:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#28, d0
	jmp	(md_error_dispatch)
_v_trap0xd:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#29, d0
	jmp	(md_error_dispatch)
_v_trap0xe:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#30, d0
	jmp	(md_error_dispatch)
_v_trap0xf:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#31, d0
	jmp	(md_error_dispatch)
_v_unimp:
	movem.l	d0-d7/a0-a7, -(sp)
	moveq	#32, d0
	jmp	(md_error_dispatch)
